#lang racket

(require compatibility/defmacro)             

(define-macro (my-assert-true body)        ; from proseminars
  `(unless ,body
     (error (format "Failed assertion '(assert-true ~a)'" ',body))))

(define-macro (my-assert-equals body1 body2) ; from proseminars
  `(unless (equal? ,body1 ,body2)
     (error (format "Failed assertion '(assert-equals ~a ~a)'" ',body1 ',body2))))

;--------------------------------------------------------------------------------------------
;--------------------------------------PROGRAM-----------------------------------------------
;--------------------------------------------------------------------------------------------

(define (my-append lst x)                    ; took from proseminares
  (if (null? lst)
      (cons x null)
      (cons (car lst) (my-append (cdr lst) x))))

;--------------------------------------------------------------------------------------------
(define (rem-first-column input res)             ;remove first column
  (if (null? input)
      res
      (rem-first-column (cdr input) (my-append res (cdar input)))))

;--------------------------------------------------------------------------------------------
(define (set-elem matrix y x num)           ; change element in matrix at given location 
  (for/list ([row matrix] [i (length matrix)])    ; internet helped with for/list
    (for/list ([original row] [j (length row)])
      (if (and (= x i) (= y j))           
          num
          original))))

;--------------------------------------------------------------------------------------------
(define (can-row? matrix row num)            ; check if 'num' can be in given row
  (if (zero? row)
      (if (null? matrix)
          #t
          (if (list? (car matrix))
              (if (= num (caar matrix))
                  #f
                  (can-row? (cdar matrix) 0 num))
              (if (= num (car matrix))
                  #f
                  (can-row? (cdr matrix) 0 num))))
      (if (= 1 row)
          (can-row? (cadr matrix) 0 num)
          (can-row? (cdr matrix) (- row 1) num))))
  
;--------------------------------------------------------------------------------------------
(define (can-col? matrix column num)        ; check if 'num' can be in given column
  (cond
    ((not (zero? column))  (can-col? (rem-first-column matrix '()) (- column 1) num))
    ((null? matrix) #t)
    ((= num (caar matrix)) #f)
    (#t (can-col? (cdr matrix) 0 num))))

;--------------------------------------------------------------------------------------------
(define (is-in-line? line num acum)         ; check if 'num' is in first 3 elements of line
  (cond
    ((zero? acum) #f)
    ((= (car line) num) #t)
    (#t (is-in-line? (cdr line) num (- acum 1)))))

;--------------------------------------------------------------------------------------------
(define (is-in-square? matrix num acum)     ; check if 'num' is 3x3 square from [0, 0]
  (cond
    ((zero? acum) #f)
    ((is-in-line? (car matrix) num 3) #t)
    (#t (is-in-square? (cdr matrix) num (- acum 1)))))
      
;--------------------------------------------------------------------------------------------
(define (can-be-in-squere? matrix row col num)  ; place 3x3 square at position (col, row) into front of matrix 
  (if (zero? row)                               ; so i can easily use is-in-square?
      (if (zero? col)
          (not (is-in-square? matrix num 3))
          (can-be-in-squere? (rem-first-column matrix '()) 0 (- col 1) num))
      (can-be-in-squere? (cdr matrix) (- row 1) col num)))

;--------------------------------------------------------------------------------------------
(define (possible? matrix row column num)    ; returns if num can be placed in given position
  (and
   (can-row? matrix row num)
   (and
    (can-col? matrix column num)
    (can-be-in-squere? matrix (* (exact-floor (/ row 3)) 3) (* (exact-floor (/ column 3)) 3) num))))

;--------------------------------------------------------------------------------------------
(define (index matrix row col)               ; returns element in matrix at given position
  (if (zero? row)
      (if (zero? col)
          (if (list? (car matrix))
              (caar matrix)
              (car matrix))
          (if (list? (car matrix))
              (index (cdar matrix) 0 (- col 1))
              (index (cdr matrix) 0 (- col 1))))
      (if (= 1 row)
           (index (cadr matrix) 0 col)
           (index (cdr matrix) (- row 1) col))))

;--------------------------------------------------------------------------------------------
(define (fill-sudoku solved row column tmp)   ; try every possible option, tmp -> number that is being tried to be filled in sudoku if possible
  (cond
    ((= 9 row) solved) ; success
    ((= 9 column) (fill-sudoku solved (+ 1 row) 0 1)) ; end of row 
    ((not (zero? (index solved row column))) (fill-sudoku solved row (+ 1 column) 1)) ; already filled
    ((= 10 tmp) #f)
    ((possible? solved row column tmp)
                (let ((predict (fill-sudoku (set-elem solved column row tmp) row (+ 1 column) 1)))
                        (if predict
                            predict
                            (fill-sudoku solved row column (+ 1 tmp)))))
    (#t  (fill-sudoku solved row column (+ 1 tmp)))))
;--------------------------------------------------------------------------------------------
(define (check-elems line)                   ; check every element 
  (cond
    ((null? line) #t)
    ((not (number? (car line))) #f)
    ((< (car line) 0 ) #f)
    ((< 9 (car line)) #f)
    (#t (check-elems (cdr line)))))


;--------------------------------------------------------------------------------------------
(define (check-input matrix acum)           ; check whole matrix 
  (cond
        ((and (null? matrix) (= acum 9)) #t)    ;good
        ((null? matrix) #f)
        ((not (= 9 (length (car matrix)))) #f)
        ((not (check-elems (car matrix))) #f)
        (#t (check-input (cdr matrix) (+ 1 acum)))))
        

;--------------------------------------------------------------------------------------------
(define (solve-sudoku matrix)                ; start at (0, 0) with first possible number 1
  (if (not (check-input matrix 0))
      #f
      (fill-sudoku matrix 0 0 1)))

;--------------------------------------------------------------------------------------------
;----------------------------------DATA-FOR-TESTS--------------------------------------------
;--------------------------------------------------------------------------------------------
; do not be scared
; this tests may run over 1 minute

(define wrong01 '
  ((1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1)))

(define wrong02 '
  ((1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)))

(define wrong03 '
  ((1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)))

(define wrong04 '
  ((1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 )))

(define wrong05 '
  ((1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 1)
   (1 1 1 1 1 1 1 1 )))

(define wrong06 '
 [[0 0 3 0 2 0 6 0 0]
 [9 0 0 3 0 5 0 0 1]
 [0 0 1 8 0 10 4 0 0]
 [0 0 8 1 0 2 9 0 0]
 [7 0 0 0 0 0 0 0 8]
 [0 0 6 7 0 8 2 0 0]
 [0 0 2 6 0 9 5 0 0]
 [8 0 0 2 0 3 0 0 9]
 [0 0 5 0 1 0 3 0 0]] )

(define wrong07 '
 [[0 0 3 0 2 0 6 0 0]
 [9 0 0 3 0 5 0 0 1]
 [0 0 1 8 0 6 4 0 0]
 [0 0 8 1 0 2 9 0 0]
 [7 0 0 0 0 0 0 0 8]
 [0 0 6 7 0 q 2 0 0]
 [0 0 2 6 0 9 5 0 0]
 [8 0 0 2 0 3 0 0 9]
 [0 0 5 0 1 0 3 0 0]] )

(define wrong08 '
 [[0 0 3 0 2 0 6 0 0]
 [9 0 0 3 0 5 0 0 1]
 [0 0 1 8 0 6 4 0 0]
 [0 0 8 1 0 2 9 0 0]
 [7 0 0 0 0 0 0 0 8]
 [0 0 6 7 0 0 7 0 0]
 [0 0 2 6 0 9 5 0 0]
 [8 0 0 2 0 3 0 0 9]
 [0 0 5 0 1 0 3 0 0]] )

(define wrong09 '
 [[0 0 3 0 2 0 6 0 0]
 [9 0 5 3 0 5 0 0 1]
 [0 0 1 8 0 6 4 0 0]
 [0 0 8 1 0 2 9 0 0]
 [7 0 0 0 0 0 0 0 8]
 [0 0 6 7 0 0 2 0 0]
 [0 0 2 6 0 9 5 0 0]
 [8 0 0 2 0 3 0 0 9]
 [0 0 5 0 1 0 3 0 0]] )

(define wrong10 '
 [[0 0 3 0 2 0 6 0 0]
 [9 0 0 3 0 5 0 0 1]
 [0 0 1 8 0 6 4 0 0]
 [0 0 8 1 0 2 9 0 0]
 [7 0 0 0 0 0 0 0 8]
 [0 0 6 7 0 0 2 0 0]
 [0 0 2 6 0 9 5 0 0]
 [8 0 0 2 0 3 0 0 9]
 [0 0 5 0 1 0 3 9 0]] )

(define grid01 '
 [[0 0 3 0 2 0 6 0 0]
 [9 0 0 3 0 5 0 0 1]
 [0 0 1 8 0 6 4 0 0]
 [0 0 8 1 0 2 9 0 0]
 [7 0 0 0 0 0 0 0 8]
 [0 0 6 7 0 8 2 0 0]
 [0 0 2 6 0 9 5 0 0]
 [8 0 0 2 0 3 0 0 9]
 [0 0 5 0 1 0 3 0 0]] )

(define grid01-res '
 [[4 8 3 9 2 1 6 5 7]
 [9 6 7 3 4 5 8 2 1]
 [2 5 1 8 7 6 4 9 3]
 [5 4 8 1 3 2 9 7 6]
 [7 2 9 5 6 4 1 3 8]
 [1 3 6 7 9 8 2 4 5]
 [3 7 2 6 8 9 5 1 4]
 [8 1 4 2 5 3 7 6 9]
 [6 9 5 4 1 7 3 8 2]] )

(define grid02 '
 [[2 0 0 0 8 0 3 0 0]
 [0 6 0 0 7 0 0 8 4]
 [0 3 0 5 0 0 2 0 9]
 [0 0 0 1 0 5 4 0 8]
 [0 0 0 0 0 0 0 0 0]
 [4 0 2 7 0 6 0 0 0]
 [3 0 1 0 0 7 0 4 0]
 [7 2 0 0 4 0 0 6 0]
 [0 0 4 0 1 0 0 0 3]] )

(define grid02-res '
 [[2 4 5 9 8 1 3 7 6]
 [1 6 9 2 7 3 5 8 4]
 [8 3 7 5 6 4 2 1 9]
 [9 7 6 1 2 5 4 3 8]
 [5 1 3 4 9 8 6 2 7]
 [4 8 2 7 3 6 9 5 1]
 [3 9 1 6 5 7 8 4 2]
 [7 2 8 3 4 9 1 6 5]
 [6 5 4 8 1 2 7 9 3]] )

(define grid03 '
 [[0 0 0 0 0 0 9 0 7]
 [0 0 0 4 2 0 1 8 0]
 [0 0 0 7 0 5 0 2 6]
 [1 0 0 9 0 4 0 0 0]
 [0 5 0 0 0 0 0 4 0]
 [0 0 0 5 0 7 0 0 9]
 [9 2 0 1 0 8 0 0 0]
 [0 3 4 0 5 9 0 0 0]
 [5 0 7 0 0 0 0 0 0]] )

(define grid03-res '
 [[4 6 2 8 3 1 9 5 7]
 [7 9 5 4 2 6 1 8 3]
 [3 8 1 7 9 5 4 2 6]
 [1 7 3 9 8 4 2 6 5]
 [6 5 9 3 1 2 7 4 8]
 [2 4 8 5 6 7 3 1 9]
 [9 2 6 1 7 8 5 3 4]
 [8 3 4 2 5 9 6 7 1]
 [5 1 7 6 4 3 8 9 2]] )

(define grid04 '
 [[0 3 0 0 5 0 0 4 0]
 [0 0 8 0 1 0 5 0 0]
 [4 6 0 0 0 0 0 1 2]
 [0 7 0 5 0 2 0 8 0]
 [0 0 0 6 0 3 0 0 0]
 [0 4 0 1 0 9 0 3 0]
 [2 5 0 0 0 0 0 9 8]
 [0 0 1 0 2 0 6 0 0]
 [0 8 0 0 6 0 0 2 0]] )

(define grid04-res '
 [[1 3 7 2 5 6 8 4 9]
 [9 2 8 3 1 4 5 6 7]
 [4 6 5 8 9 7 3 1 2]
 [6 7 3 5 4 2 9 8 1]
 [8 1 9 6 7 3 2 5 4]
 [5 4 2 1 8 9 7 3 6]
 [2 5 6 7 3 1 4 9 8]
 [3 9 1 4 2 8 6 7 5]
 [7 8 4 9 6 5 1 2 3]] )

(define grid05 '
 [[0 2 0 8 1 0 7 4 0]
 [7 0 0 0 0 3 1 0 0]
 [0 9 0 0 0 2 8 0 5]
 [0 0 9 0 4 0 0 8 7]
 [4 0 0 2 0 8 0 0 3]
 [1 6 0 0 3 0 2 0 0]
 [3 0 2 7 0 0 0 6 0]
 [0 0 5 6 0 0 0 0 8]
 [0 7 6 0 5 1 0 9 0]] )

(define grid05-res '
 [[5 2 3 8 1 6 7 4 9]
 [7 8 4 5 9 3 1 2 6]
 [6 9 1 4 7 2 8 3 5]
 [2 3 9 1 4 5 6 8 7]
 [4 5 7 2 6 8 9 1 3]
 [1 6 8 9 3 7 2 5 4]
 [3 4 2 7 8 9 5 6 1]
 [9 1 5 6 2 4 3 7 8]
 [8 7 6 3 5 1 4 9 2]] )

(define grid06 '
 [[1 0 0 9 2 0 0 0 0]
 [5 2 4 0 1 0 0 0 0]
 [0 0 0 0 0 0 0 7 0]
 [0 5 0 0 0 8 1 0 2]
 [0 0 0 0 0 0 0 0 0]
 [4 0 2 7 0 0 0 9 0]
 [0 6 0 0 0 0 0 0 0]
 [0 0 0 0 3 0 9 4 5]
 [0 0 0 0 7 1 0 0 6]] )

(define grid06-res '
 [[1 7 6 9 2 3 5 8 4]
 [5 2 4 8 1 7 6 3 9]
 [8 9 3 6 5 4 2 7 1]
 [9 5 7 3 4 8 1 6 2]
 [6 3 8 1 9 2 4 5 7]
 [4 1 2 7 6 5 3 9 8]
 [2 6 5 4 8 9 7 1 3]
 [7 8 1 2 3 6 9 4 5]
 [3 4 9 5 7 1 8 2 6]] )

(define grid07 '
 [[0 4 3 0 8 0 2 5 0]
 [6 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 1 0 9 4]
 [9 0 0 0 0 4 0 7 0]
 [0 0 0 6 0 8 0 0 0]
 [0 1 0 2 0 0 0 0 3]
 [8 2 0 5 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 5]
 [0 3 4 0 9 0 7 1 0]] )

(define grid07-res '
 [[1 4 3 9 8 6 2 5 7]
 [6 7 9 4 2 5 3 8 1]
 [2 8 5 7 3 1 6 9 4]
 [9 6 2 3 5 4 1 7 8]
 [3 5 7 6 1 8 9 4 2]
 [4 1 8 2 7 9 5 6 3]
 [8 2 1 5 6 7 4 3 9]
 [7 9 6 1 4 3 8 2 5]
 [5 3 4 8 9 2 7 1 6]] )

(define grid08 '
 [[4 8 0 0 0 6 9 0 2]
 [0 0 2 0 0 8 0 0 1]
 [9 0 0 3 7 0 0 6 0]
 [8 4 0 0 1 0 2 0 0]
 [0 0 3 7 0 4 1 0 0]
 [0 0 1 0 6 0 0 4 9]
 [0 2 0 0 8 5 0 0 7]
 [7 0 0 9 0 0 6 0 0]
 [6 0 9 2 0 0 0 1 8]] )

(define grid08-res '
 [[4 8 7 1 5 6 9 3 2]
 [3 6 2 4 9 8 7 5 1]
 [9 1 5 3 7 2 8 6 4]
 [8 4 6 5 1 9 2 7 3]
 [5 9 3 7 2 4 1 8 6]
 [2 7 1 8 6 3 5 4 9]
 [1 2 4 6 8 5 3 9 7]
 [7 3 8 9 4 1 6 2 5]
 [6 5 9 2 3 7 4 1 8]] )

(define grid09 '
 [[0 0 0 9 0 0 0 0 2]
 [0 5 0 1 2 3 4 0 0]
 [0 3 0 0 0 0 1 6 0]
 [9 0 8 0 0 0 0 0 0]
 [0 7 0 0 0 0 0 9 0]
 [0 0 0 0 0 0 2 0 5]
 [0 9 1 0 0 0 0 5 0]
 [0 0 7 4 3 9 0 2 0]
 [4 0 0 0 0 7 0 0 0]] )

(define grid09-res '
 [[8 1 4 9 7 6 5 3 2]
 [6 5 9 1 2 3 4 7 8]
 [7 3 2 8 5 4 1 6 9]
 [9 4 8 2 6 5 3 1 7]
 [2 7 5 3 4 1 8 9 6]
 [1 6 3 7 9 8 2 4 5]
 [3 9 1 6 8 2 7 5 4]
 [5 8 7 4 3 9 6 2 1]
 [4 2 6 5 1 7 9 8 3]] )

(define grid10 '
 [[0 0 1 9 0 0 0 0 3]
 [9 0 0 7 0 0 1 6 0]
 [0 3 0 0 0 5 0 0 7]
 [0 5 0 0 0 0 0 0 9]
 [0 0 4 3 0 2 6 0 0]
 [2 0 0 0 0 0 0 7 0]
 [6 0 0 1 0 0 0 3 0]
 [0 4 2 0 0 7 0 0 6]
 [5 0 0 0 0 6 8 0 0]] )

(define grid10-res '
 [[7 6 1 9 2 8 4 5 3]
 [9 2 5 7 4 3 1 6 8]
 [4 3 8 6 1 5 9 2 7]
 [3 5 7 4 6 1 2 8 9]
 [8 9 4 3 7 2 6 1 5]
 [2 1 6 5 8 9 3 7 4]
 [6 8 9 1 5 4 7 3 2]
 [1 4 2 8 3 7 5 9 6]
 [5 7 3 2 9 6 8 4 1]] )

(define grid11 '
 [[0 0 0 1 2 5 4 0 0]
 [0 0 8 4 0 0 0 0 0]
 [4 2 0 8 0 0 0 0 0]
 [0 3 0 0 0 0 0 9 5]
 [0 6 0 9 0 2 0 1 0]
 [5 1 0 0 0 0 0 6 0]
 [0 0 0 0 0 3 0 4 9]
 [0 0 0 0 0 7 2 0 0]
 [0 0 1 2 9 8 0 0 0]] )

(define grid11-res '
 [[9 7 6 1 2 5 4 3 8]
 [1 5 8 4 3 6 9 2 7]
 [4 2 3 8 7 9 1 5 6]
 [2 3 4 7 6 1 8 9 5]
 [8 6 7 9 5 2 3 1 4]
 [5 1 9 3 8 4 7 6 2]
 [7 8 2 5 1 3 6 4 9]
 [3 9 5 6 4 7 2 8 1]
 [6 4 1 2 9 8 5 7 3]] )

(define grid12 '
 [[0 6 2 3 4 0 7 5 0]
 [1 0 0 0 0 5 6 0 0]
 [5 7 0 0 0 0 0 4 0]
 [0 0 0 0 9 4 8 0 0]
 [4 0 0 0 0 0 0 0 6]
 [0 0 5 8 3 0 0 0 0]
 [0 3 0 0 0 0 0 9 1]
 [0 0 6 4 0 0 0 0 7]
 [0 5 9 0 8 3 2 6 0]] )

(define grid12-res '
 [[9 6 2 3 4 1 7 5 8]
 [1 4 8 9 7 5 6 2 3]
 [5 7 3 2 6 8 1 4 9]
 [3 2 1 6 9 4 8 7 5]
 [4 8 7 5 1 2 9 3 6]
 [6 9 5 8 3 7 4 1 2]
 [8 3 4 7 2 6 5 9 1]
 [2 1 6 4 5 9 3 8 7]
 [7 5 9 1 8 3 2 6 4]] )

(define grid13 '
 [[3 0 0 0 0 0 0 0 0]
 [0 0 5 0 0 9 0 0 0]
 [2 0 0 5 0 4 0 0 0]
 [0 2 0 0 0 0 7 0 0]
 [1 6 0 0 0 0 0 5 8]
 [7 0 4 3 1 0 6 0 0]
 [0 0 0 8 9 0 1 0 0]
 [0 0 0 0 6 7 0 8 0]
 [0 0 0 0 0 5 4 3 7]] )

(define grid13-res '
 [[3 9 7 6 8 1 5 2 4]
 [6 4 5 2 7 9 8 1 3]
 [2 1 8 5 3 4 9 7 6]
 [8 2 3 9 5 6 7 4 1]
 [1 6 9 7 4 2 3 5 8]
 [7 5 4 3 1 8 6 9 2]
 [4 7 2 8 9 3 1 6 5]
 [5 3 1 4 6 7 2 8 9]
 [9 8 6 1 2 5 4 3 7]] )

(define grid14 '
 [[6 3 0 0 0 0 0 0 0]
 [0 0 0 5 0 0 0 0 8]
 [0 0 5 6 7 4 0 0 0]
 [0 0 0 0 2 0 0 0 0]
 [0 0 3 4 0 1 0 2 0]
 [0 0 0 0 0 0 3 4 5]
 [0 0 0 0 0 7 0 0 4]
 [0 8 0 3 0 0 9 0 2]
 [9 4 7 1 0 0 0 8 0]] )

(define grid14-res '
 [[6 3 9 2 1 8 4 5 7]
 [4 7 1 5 3 9 2 6 8]
 [8 2 5 6 7 4 1 3 9]
 [5 6 4 8 2 3 7 9 1]
 [7 9 3 4 5 1 8 2 6]
 [2 1 8 7 9 6 3 4 5]
 [3 5 2 9 8 7 6 1 4]
 [1 8 6 3 4 5 9 7 2]
 [9 4 7 1 6 2 5 8 3]] )

(define grid15 '
 [[0 0 0 0 2 0 0 4 0]
 [0 0 8 0 3 5 0 0 0]
 [0 0 0 0 7 0 6 0 2]
 [0 3 1 0 4 6 9 7 0]
 [2 0 0 0 0 0 0 0 0]
 [0 0 0 5 0 1 2 0 3]
 [0 4 9 0 0 0 7 3 0]
 [0 0 0 0 0 0 0 1 0]
 [8 0 0 0 0 4 0 0 0]] )

(define grid15-res '
 [[6 9 7 1 2 8 3 4 5]
 [4 2 8 6 3 5 1 9 7]
 [3 1 5 4 7 9 6 8 2]
 [5 3 1 2 4 6 9 7 8]
 [2 8 6 3 9 7 4 5 1]
 [9 7 4 5 8 1 2 6 3]
 [1 4 9 8 5 2 7 3 6]
 [7 5 2 9 6 3 8 1 4]
 [8 6 3 7 1 4 5 2 9]] )

(define grid16 '
 [[3 6 1 0 2 5 9 0 0]
 [0 8 0 9 6 0 0 1 0]
 [4 0 0 0 0 0 0 5 7]
 [0 0 8 0 0 0 4 7 1]
 [0 0 0 6 0 3 0 0 0]
 [2 5 9 0 0 0 8 0 0]
 [7 4 0 0 0 0 0 0 5]
 [0 2 0 0 1 8 0 6 0]
 [0 0 5 4 7 0 3 2 9]] )

(define grid16-res '
 [[3 6 1 7 2 5 9 4 8]
 [5 8 7 9 6 4 2 1 3]
 [4 9 2 8 3 1 6 5 7]
 [6 3 8 2 5 9 4 7 1]
 [1 7 4 6 8 3 5 9 2]
 [2 5 9 1 4 7 8 3 6]
 [7 4 6 3 9 2 1 8 5]
 [9 2 3 5 1 8 7 6 4]
 [8 1 5 4 7 6 3 2 9]] )

(define grid17 '
 [[0 5 0 8 0 7 0 2 0]
 [6 0 0 0 1 0 0 9 0]
 [7 0 2 5 4 0 0 0 6]
 [0 7 0 0 2 0 3 0 1]
 [5 0 4 0 0 0 9 0 8]
 [1 0 3 0 8 0 0 7 0]
 [9 0 0 0 7 6 2 0 5]
 [0 6 0 0 9 0 0 0 3]
 [0 8 0 1 0 3 0 4 0]] )

(define grid17-res '
 [[3 5 9 8 6 7 1 2 4]
 [6 4 8 3 1 2 5 9 7]
 [7 1 2 5 4 9 8 3 6]
 [8 7 6 9 2 4 3 5 1]
 [5 2 4 7 3 1 9 6 8]
 [1 9 3 6 8 5 4 7 2]
 [9 3 1 4 7 6 2 8 5]
 [4 6 5 2 9 8 7 1 3]
 [2 8 7 1 5 3 6 4 9]] )

(define grid18 '
 [[0 8 0 0 0 5 0 0 0]
 [0 0 0 0 0 3 4 5 7]
 [0 0 0 0 7 0 8 0 9]
 [0 6 0 4 0 0 9 0 3]
 [0 0 7 0 1 0 5 0 0]
 [4 0 8 0 0 7 0 2 0]
 [9 0 1 0 2 0 0 0 0]
 [8 4 2 3 0 0 0 0 0]
 [0 0 0 1 0 0 0 8 0]] )

(define grid18-res '
 [[7 8 6 9 4 5 3 1 2]
 [2 1 9 8 6 3 4 5 7]
 [5 3 4 2 7 1 8 6 9]
 [1 6 5 4 8 2 9 7 3]
 [3 2 7 6 1 9 5 4 8]
 [4 9 8 5 3 7 1 2 6]
 [9 5 1 7 2 8 6 3 4]
 [8 4 2 3 5 6 7 9 1]
 [6 7 3 1 9 4 2 8 5]] )

(define grid19 '
 [[0 0 3 5 0 2 9 0 0]
 [0 0 0 0 4 0 0 0 0]
 [1 0 6 0 0 0 3 0 5]
 [9 0 0 2 5 1 0 0 8]
 [0 7 0 4 0 8 0 3 0]
 [8 0 0 7 6 3 0 0 1]
 [3 0 8 0 0 0 1 0 4]
 [0 0 0 0 2 0 0 0 0]
 [0 0 5 1 0 4 8 0 0]] )

(define grid19-res '
 [[7 4 3 5 1 2 9 8 6]
 [5 8 9 3 4 6 2 1 7]
 [1 2 6 9 8 7 3 4 5]
 [9 3 4 2 5 1 7 6 8]
 [6 7 1 4 9 8 5 3 2]
 [8 5 2 7 6 3 4 9 1]
 [3 9 8 6 7 5 1 2 4]
 [4 1 7 8 2 9 6 5 3]
 [2 6 5 1 3 4 8 7 9]] )

(define grid20 '
 [[0 0 0 0 0 0 0 0 0]
 [0 0 9 8 0 5 1 0 0]
 [0 5 1 9 0 7 4 2 0]
 [2 9 0 4 0 1 0 6 5]
 [0 0 0 0 0 0 0 0 0]
 [1 4 0 5 0 8 0 9 3]
 [0 2 6 7 0 9 5 8 0]
 [0 0 5 1 0 3 6 0 0]
 [0 0 0 0 0 0 0 0 0]] )

(define grid20-res '
 [[7 8 2 6 1 4 3 5 9]
 [4 3 9 8 2 5 1 7 6]
 [6 5 1 9 3 7 4 2 8]
 [2 9 3 4 7 1 8 6 5]
 [5 6 8 3 9 2 7 1 4]
 [1 4 7 5 6 8 2 9 3]
 [3 2 6 7 4 9 5 8 1]
 [9 7 5 1 8 3 6 4 2]
 [8 1 4 2 5 6 9 3 7]] )

(define grid21 '
 [[0 2 0 0 3 0 0 9 0]
 [0 0 0 9 0 7 0 0 0]
 [9 0 0 2 0 8 0 0 5]
 [0 0 4 8 0 6 5 0 0]
 [6 0 7 0 0 0 2 0 8]
 [0 0 3 1 0 2 9 0 0]
 [8 0 0 6 0 5 0 0 7]
 [0 0 0 3 0 9 0 0 0]
 [0 3 0 0 2 0 0 5 0]] )

(define grid21-res '
 [[4 2 8 5 3 1 7 9 6]
 [3 6 5 9 4 7 1 8 2]
 [9 7 1 2 6 8 4 3 5]
 [2 1 4 8 9 6 5 7 3]
 [6 9 7 4 5 3 2 1 8]
 [5 8 3 1 7 2 9 6 4]
 [8 4 9 6 1 5 3 2 7]
 [7 5 2 3 8 9 6 4 1]
 [1 3 6 7 2 4 8 5 9]] )

(define grid22 '
 [[0 0 5 0 0 0 0 0 6]
 [0 7 0 0 0 9 0 2 0]
 [0 0 0 5 0 0 1 0 7]
 [8 0 4 1 5 0 0 0 0]
 [0 0 0 8 0 3 0 0 0]
 [0 0 0 0 9 2 8 0 5]
 [9 0 7 0 0 6 0 0 0]
 [0 3 0 4 0 0 0 1 0]
 [2 0 0 0 0 0 6 0 0]] )

(define grid22-res '
 [[4 2 5 7 8 1 9 3 6]
 [1 7 8 3 6 9 5 2 4]
 [3 6 9 5 2 4 1 8 7]
 [8 9 4 1 5 7 3 6 2]
 [6 5 2 8 4 3 7 9 1]
 [7 1 3 6 9 2 8 4 5]
 [9 8 7 2 1 6 4 5 3]
 [5 3 6 4 7 8 2 1 9]
 [2 4 1 9 3 5 6 7 8]] )

(define grid23 '
 [[0 4 0 0 0 0 0 5 0]
 [0 0 1 9 4 3 6 0 0]
 [0 0 9 0 0 0 3 0 0]
 [6 0 0 0 5 0 0 0 2]
 [1 0 3 0 0 0 5 0 6]
 [8 0 0 0 2 0 0 0 7]
 [0 0 5 0 0 0 2 0 0]
 [0 0 2 4 3 6 7 0 0]
 [0 3 0 0 0 0 0 4 0]] )

(define grid23-res '
 [[3 4 8 2 6 7 9 5 1]
 [5 7 1 9 4 3 6 2 8]
 [2 6 9 1 8 5 3 7 4]
 [6 9 7 3 5 1 4 8 2]
 [1 2 3 8 7 4 5 9 6]
 [8 5 4 6 2 9 1 3 7]
 [4 1 5 7 9 8 2 6 3]
 [9 8 2 4 3 6 7 1 5]
 [7 3 6 5 1 2 8 4 9]] )

(define grid24 '
 [[0 0 4 0 0 0 0 0 0]
 [0 0 0 0 3 0 0 0 2]
 [3 9 0 7 0 0 0 8 0]
 [4 0 0 0 0 9 0 0 1]
 [2 0 9 8 0 1 3 0 7]
 [6 0 0 2 0 0 0 0 8]
 [0 1 0 0 0 8 0 5 3]
 [9 0 0 0 4 0 0 0 0]
 [0 0 0 0 0 0 8 0 0]] )

(define grid24-res '
 [[1 2 4 9 8 6 7 3 5]
 [8 6 7 4 3 5 9 1 2]
 [3 9 5 7 1 2 6 8 4]
 [4 7 8 3 5 9 2 6 1]
 [2 5 9 8 6 1 3 4 7]
 [6 3 1 2 7 4 5 9 8]
 [7 1 2 6 9 8 4 5 3]
 [9 8 3 5 4 7 1 2 6]
 [5 4 6 1 2 3 8 7 9]] )

(define grid25 '
 [[3 6 0 0 2 0 0 8 9]
 [0 0 0 3 6 1 0 0 0]
 [0 0 0 0 0 0 0 0 0]
 [8 0 3 0 0 0 6 0 2]
 [4 0 0 6 0 3 0 0 7]
 [6 0 7 0 0 0 1 0 8]
 [0 0 0 0 0 0 0 0 0]
 [0 0 0 4 1 8 0 0 0]
 [9 7 0 0 3 0 0 1 4]] )

(define grid25-res '
 [[3 6 1 5 2 4 7 8 9]
 [7 8 9 3 6 1 4 2 5]
 [5 2 4 8 7 9 3 6 1]
 [8 9 3 1 5 7 6 4 2]
 [4 1 2 6 8 3 5 9 7]
 [6 5 7 9 4 2 1 3 8]
 [1 4 8 7 9 6 2 5 3]
 [2 3 5 4 1 8 9 7 6]
 [9 7 6 2 3 5 8 1 4]] )

(define grid26 '
 [[5 0 0 4 0 0 0 6 0]
 [0 0 9 0 0 0 8 0 0]
 [6 4 0 0 2 0 0 0 0]
 [0 0 0 0 0 1 0 0 8]
 [2 0 8 0 0 0 5 0 1]
 [7 0 0 5 0 0 0 0 0]
 [0 0 0 0 9 0 0 8 4]
 [0 0 3 0 0 0 6 0 0]
 [0 6 0 0 0 3 0 0 2]] )

(define grid26-res '
 [[5 8 1 4 7 9 2 6 3]
 [3 2 9 1 5 6 8 4 7]
 [6 4 7 3 2 8 1 5 9]
 [9 5 6 7 3 1 4 2 8]
 [2 3 8 9 6 4 5 7 1]
 [7 1 4 5 8 2 9 3 6]
 [1 7 2 6 9 5 3 8 4]
 [8 9 3 2 4 7 6 1 5]
 [4 6 5 8 1 3 7 9 2]] )

(define grid27 '
 [[0 0 7 2 5 6 4 0 0]
 [4 0 0 0 0 0 0 0 5]
 [0 1 0 0 3 0 0 6 0]
 [0 0 0 5 0 8 0 0 0]
 [0 0 8 0 6 0 2 0 0]
 [0 0 0 1 0 7 0 0 0]
 [0 3 0 0 7 0 0 9 0]
 [2 0 0 0 0 0 0 0 4]
 [0 0 6 3 1 2 7 0 0]] )

(define grid27-res '
 [[3 8 7 2 5 6 4 1 9]
 [4 6 9 7 8 1 3 2 5]
 [5 1 2 4 3 9 8 6 7]
 [1 2 3 5 4 8 9 7 6]
 [7 5 8 9 6 3 2 4 1]
 [6 9 4 1 2 7 5 8 3]
 [8 3 5 6 7 4 1 9 2]
 [2 7 1 8 9 5 6 3 4]
 [9 4 6 3 1 2 7 5 8]] )

(define grid28 '
 [[0 0 0 0 0 0 0 0 0]
 [0 7 9 0 5 0 1 8 0]
 [8 0 0 0 0 0 0 0 7]
 [0 0 7 3 0 6 8 0 0]
 [4 5 0 7 0 8 0 9 6]
 [0 0 3 5 0 2 7 0 0]
 [7 0 0 0 0 0 0 0 5]
 [0 1 6 0 3 0 4 2 0]
 [0 0 0 0 0 0 0 0 0]] )

(define grid28-res '
 [[3 4 5 8 7 1 2 6 9]
 [2 7 9 6 5 3 1 8 4]
 [8 6 1 4 2 9 5 3 7]
 [1 9 7 3 4 6 8 5 2]
 [4 5 2 7 1 8 3 9 6]
 [6 8 3 5 9 2 7 4 1]
 [7 3 8 2 6 4 9 1 5]
 [5 1 6 9 3 7 4 2 8]
 [9 2 4 1 8 5 6 7 3]] )

(define grid29 '
 [[0 3 0 0 0 0 0 8 0]
 [0 0 9 0 0 0 5 0 0]
 [0 0 7 5 0 9 2 0 0]
 [7 0 0 1 0 5 0 0 8]
 [0 2 0 0 9 0 0 3 0]
 [9 0 0 4 0 2 0 0 1]
 [0 0 4 2 0 7 1 0 0]
 [0 0 2 0 0 0 8 0 0]
 [0 7 0 0 0 0 0 9 0]] )

(define grid29-res '
 [[2 3 5 7 6 1 4 8 9]
 [4 1 9 3 2 8 5 7 6]
 [8 6 7 5 4 9 2 1 3]
 [7 4 6 1 3 5 9 2 8]
 [5 2 1 8 9 6 7 3 4]
 [9 8 3 4 7 2 6 5 1]
 [3 9 4 2 8 7 1 6 5]
 [6 5 2 9 1 3 8 4 7]
 [1 7 8 6 5 4 3 9 2]] )

(define grid30 '
 [[2 0 0 1 7 0 6 0 3]
 [0 5 0 0 0 0 1 0 0]
 [0 0 0 0 0 6 0 7 9]
 [0 0 0 0 4 0 7 0 0]
 [0 0 0 8 0 1 0 0 0]
 [0 0 9 0 5 0 0 0 0]
 [3 1 0 4 0 0 0 0 0]
 [0 0 5 0 0 0 0 6 0]
 [9 0 6 0 3 7 0 0 2]] )

(define grid30-res '
 [[2 9 8 1 7 5 6 4 3]
 [6 5 7 3 9 4 1 2 8]
 [1 3 4 2 8 6 5 7 9]
 [8 2 1 6 4 9 7 3 5]
 [5 7 3 8 2 1 4 9 6]
 [4 6 9 7 5 3 2 8 1]
 [3 1 2 4 6 8 9 5 7]
 [7 8 5 9 1 2 3 6 4]
 [9 4 6 5 3 7 8 1 2]] )

(define grid31 '
 [[0 0 0 0 0 0 0 8 0]
 [8 0 0 7 0 1 0 4 0]
 [0 4 0 0 2 0 0 3 0]
 [3 7 4 0 0 0 9 0 0]
 [0 0 0 0 3 0 0 0 0]
 [0 0 5 0 0 0 3 2 1]
 [0 1 0 0 6 0 0 5 0]
 [0 5 0 8 0 2 0 0 6]
 [0 8 0 0 0 0 0 0 0]] )

(define grid31-res '
 [[7 6 1 5 4 3 2 8 9]
 [8 3 2 7 9 1 6 4 5]
 [5 4 9 6 2 8 1 3 7]
 [3 7 4 2 1 5 9 6 8]
 [1 2 8 9 3 6 5 7 4]
 [6 9 5 4 8 7 3 2 1]
 [4 1 7 3 6 9 8 5 2]
 [9 5 3 8 7 2 4 1 6]
 [2 8 6 1 5 4 7 9 3]] )

(define grid32 '
 [[0 0 0 0 0 0 0 8 5]
 [0 0 0 2 1 0 0 0 9]
 [9 6 0 0 8 0 1 0 0]
 [5 0 0 8 0 0 0 1 6]
 [0 0 0 0 0 0 0 0 0]
 [8 9 0 0 0 6 0 0 7]
 [0 0 9 0 7 0 0 5 2]
 [3 0 0 0 5 4 0 0 0]
 [4 8 0 0 0 0 0 0 0]] )

(define grid32-res '
 [[1 3 2 6 4 9 7 8 5]
 [7 5 8 2 1 3 6 4 9]
 [9 6 4 7 8 5 1 2 3]
 [5 4 3 8 9 7 2 1 6]
 [2 7 6 5 3 1 8 9 4]
 [8 9 1 4 2 6 5 3 7]
 [6 1 9 3 7 8 4 5 2]
 [3 2 7 1 5 4 9 6 8]
 [4 8 5 9 6 2 3 7 1]] )

(define grid33 '
 [[6 0 8 0 7 0 5 0 2]
 [0 5 0 6 0 8 0 7 0]
 [0 0 2 0 0 0 3 0 0]
 [5 0 0 0 9 0 0 0 6]
 [0 4 0 3 0 2 0 5 0]
 [8 0 0 0 5 0 0 0 3]
 [0 0 5 0 0 0 2 0 0]
 [0 1 0 7 0 4 0 9 0]
 [4 0 9 0 6 0 7 0 1]] )

(define grid33-res '
 [[6 9 8 1 7 3 5 4 2]
 [3 5 4 6 2 8 1 7 9]
 [1 7 2 5 4 9 3 6 8]
 [5 3 1 8 9 7 4 2 6]
 [9 4 6 3 1 2 8 5 7]
 [8 2 7 4 5 6 9 1 3]
 [7 6 5 9 3 1 2 8 4]
 [2 1 3 7 8 4 6 9 5]
 [4 8 9 2 6 5 7 3 1]] )

(define grid34 '
 [[0 5 0 0 1 0 0 4 0]
 [1 0 7 0 0 0 6 0 2]
 [0 0 0 9 0 5 0 0 0]
 [2 0 8 0 3 0 5 0 1]
 [0 4 0 0 7 0 0 2 0]
 [9 0 1 0 8 0 4 0 6]
 [0 0 0 4 0 1 0 0 0]
 [3 0 4 0 0 0 7 0 9]
 [0 2 0 0 6 0 0 1 0]] )

(define grid34-res '
 [[8 5 2 7 1 6 9 4 3]
 [1 9 7 8 4 3 6 5 2]
 [4 6 3 9 2 5 1 8 7]
 [2 7 8 6 3 4 5 9 1]
 [6 4 5 1 7 9 3 2 8]
 [9 3 1 5 8 2 4 7 6]
 [7 8 6 4 9 1 2 3 5]
 [3 1 4 2 5 8 7 6 9]
 [5 2 9 3 6 7 8 1 4]] )

(define grid35 '
 [[0 5 3 0 0 0 7 9 0]
 [0 0 9 7 5 3 4 0 0]
 [1 0 0 0 0 0 0 0 2]
 [0 9 0 0 8 0 0 1 0]
 [0 0 0 9 0 7 0 0 0]
 [0 8 0 0 3 0 0 7 0]
 [5 0 0 0 0 0 0 0 3]
 [0 0 7 6 4 1 2 0 0]
 [0 6 1 0 0 0 9 4 0]] )

(define grid35-res '
 [[4 5 3 2 1 8 7 9 6]
 [6 2 9 7 5 3 4 8 1]
 [1 7 8 4 9 6 5 3 2]
 [7 9 6 5 8 2 3 1 4]
 [3 1 4 9 6 7 8 2 5]
 [2 8 5 1 3 4 6 7 9]
 [5 4 2 8 7 9 1 6 3]
 [9 3 7 6 4 1 2 5 8]
 [8 6 1 3 2 5 9 4 7]] )

(define grid36 '
 [[0 0 6 0 8 0 3 0 0]
 [0 4 9 0 7 0 2 5 0]
 [0 0 0 4 0 5 0 0 0]
 [6 0 0 3 1 7 0 0 4]
 [0 0 7 0 0 0 8 0 0]
 [1 0 0 8 2 6 0 0 9]
 [0 0 0 7 0 2 0 0 0]
 [0 7 5 0 4 0 1 9 0]
 [0 0 3 0 9 0 6 0 0]] )

(define grid36-res '
 [[5 1 6 2 8 9 3 4 7]
 [8 4 9 1 7 3 2 5 6]
 [7 3 2 4 6 5 9 1 8]
 [6 9 8 3 1 7 5 2 4]
 [3 2 7 9 5 4 8 6 1]
 [1 5 4 8 2 6 7 3 9]
 [9 6 1 7 3 2 4 8 5]
 [2 7 5 6 4 8 1 9 3]
 [4 8 3 5 9 1 6 7 2]] )

(define grid37 '
 [[0 0 5 0 8 0 7 0 0]
 [7 0 0 2 0 4 0 0 5]
 [3 2 0 0 0 0 0 8 4]
 [0 6 0 1 0 5 0 4 0]
 [0 0 8 0 0 0 5 0 0]
 [0 7 0 8 0 3 0 1 0]
 [4 5 0 0 0 0 0 9 1]
 [6 0 0 5 0 8 0 0 7]
 [0 0 3 0 1 0 6 0 0]] )

(define grid37-res '
 [[9 4 5 6 8 1 7 2 3]
 [7 8 1 2 3 4 9 6 5]
 [3 2 6 7 5 9 1 8 4]
 [2 6 9 1 7 5 3 4 8]
 [1 3 8 9 4 2 5 7 6]
 [5 7 4 8 6 3 2 1 9]
 [4 5 7 3 2 6 8 9 1]
 [6 1 2 5 9 8 4 3 7]
 [8 9 3 4 1 7 6 5 2]] )

(define grid38 '
 [[0 0 0 9 0 0 8 0 0]
 [1 2 8 0 0 6 4 0 0]
 [0 7 0 8 0 0 0 6 0]
 [8 0 0 4 3 0 0 0 7]
 [5 0 0 0 0 0 0 0 9]
 [6 0 0 0 7 9 0 0 8]
 [0 9 0 0 0 4 0 1 0]
 [0 0 3 6 0 0 2 8 4]
 [0 0 1 0 0 7 0 0 0]] )

(define grid38-res '
 [[3 6 5 9 4 2 8 7 1]
 [1 2 8 7 5 6 4 9 3]
 [9 7 4 8 1 3 5 6 2]
 [8 1 9 4 3 5 6 2 7]
 [5 3 7 2 6 8 1 4 9]
 [6 4 2 1 7 9 3 5 8]
 [2 9 6 3 8 4 7 1 5]
 [7 5 3 6 9 1 2 8 4]
 [4 8 1 5 2 7 9 3 6]] )

(define grid39 '
 [[0 0 0 0 8 0 0 0 0]
 [2 7 0 0 0 0 0 5 4]
 [0 9 5 0 0 0 8 1 0]
 [0 0 9 8 0 6 4 0 0]
 [0 2 0 4 0 3 0 6 0]
 [0 0 6 9 0 5 1 0 0]
 [0 1 7 0 0 0 6 2 0]
 [4 6 0 0 0 0 0 3 8]
 [0 0 0 0 9 0 0 0 0]] )

(define grid39-res '
 [[1 3 4 5 8 7 2 9 6]
 [2 7 8 1 6 9 3 5 4]
 [6 9 5 2 3 4 8 1 7]
 [3 5 9 8 1 6 4 7 2]
 [8 2 1 4 7 3 5 6 9]
 [7 4 6 9 2 5 1 8 3]
 [9 1 7 3 4 8 6 2 5]
 [4 6 2 7 5 1 9 3 8]
 [5 8 3 6 9 2 7 4 1]] )

(define grid40 '
 [[0 0 0 6 0 2 0 0 0]
 [4 0 0 0 5 0 0 0 1]
 [0 8 5 0 1 0 6 2 0]
 [0 3 8 2 0 6 7 1 0]
 [0 0 0 0 0 0 0 0 0]
 [0 1 9 4 0 7 3 5 0]
 [0 2 6 0 4 0 5 3 0]
 [9 0 0 0 2 0 0 0 7]
 [0 0 0 8 0 9 0 0 0]] )

(define grid40-res '
 [[1 9 3 6 7 2 4 8 5]
 [4 6 2 3 5 8 9 7 1]
 [7 8 5 9 1 4 6 2 3]
 [5 3 8 2 9 6 7 1 4]
 [6 7 4 1 3 5 2 9 8]
 [2 1 9 4 8 7 3 5 6]
 [8 2 6 7 4 1 5 3 9]
 [9 4 1 5 2 3 8 6 7]
 [3 5 7 8 6 9 1 4 2]] )

(define grid41 '
 [[0 0 0 9 0 0 0 0 2]
 [0 5 0 1 2 3 4 0 0]
 [0 3 0 0 0 0 1 6 0]
 [9 0 8 0 0 0 0 0 0]
 [0 7 0 0 0 0 0 9 0]
 [0 0 0 0 0 0 2 0 5]
 [0 9 1 0 0 0 0 5 0]
 [0 0 7 4 3 9 0 2 0]
 [4 0 0 0 0 7 0 0 0]] )

(define grid41-res '
 [[8 1 4 9 7 6 5 3 2]
 [6 5 9 1 2 3 4 7 8]
 [7 3 2 8 5 4 1 6 9]
 [9 4 8 2 6 5 3 1 7]
 [2 7 5 3 4 1 8 9 6]
 [1 6 3 7 9 8 2 4 5]
 [3 9 1 6 8 2 7 5 4]
 [5 8 7 4 3 9 6 2 1]
 [4 2 6 5 1 7 9 8 3]] )

(define grid42 '
 [[3 8 0 0 0 0 0 0 0]
 [0 0 0 4 0 0 7 8 5]
 [0 0 9 0 2 0 3 0 0]
 [0 6 0 0 9 0 0 0 0]
 [8 0 0 3 0 2 0 0 9]
 [0 0 0 0 4 0 0 7 0]
 [0 0 1 0 7 0 5 0 0]
 [4 9 5 0 0 6 0 0 0]
 [0 0 0 0 0 0 0 9 2]] )

(define grid42-res '
 [[3 8 4 5 6 7 9 2 1]
 [1 2 6 4 3 9 7 8 5]
 [7 5 9 8 2 1 3 4 6]
 [5 6 3 7 9 8 2 1 4]
 [8 4 7 3 1 2 6 5 9]
 [9 1 2 6 4 5 8 7 3]
 [2 3 1 9 7 4 5 6 8]
 [4 9 5 2 8 6 1 3 7]
 [6 7 8 1 5 3 4 9 2]] )

(define grid43 '
 [[0 0 0 1 5 8 0 0 0]
 [0 0 2 0 6 0 8 0 0]
 [0 3 0 0 0 0 0 4 0]
 [0 2 7 0 3 0 5 1 0]
 [0 0 0 0 0 0 0 0 0]
 [0 4 6 0 8 0 7 9 0]
 [0 5 0 0 0 0 0 8 0]
 [0 0 4 0 7 0 1 0 0]
 [0 0 0 3 2 5 0 0 0]] )

(define grid43-res '
 [[4 6 9 1 5 8 3 7 2]
 [7 1 2 4 6 3 8 5 9]
 [5 3 8 2 9 7 6 4 1]
 [9 2 7 6 3 4 5 1 8]
 [3 8 5 7 1 9 4 2 6]
 [1 4 6 5 8 2 7 9 3]
 [6 5 3 9 4 1 2 8 7]
 [2 9 4 8 7 6 1 3 5]
 [8 7 1 3 2 5 9 6 4]] )

(define grid44 '
 [[0 1 0 5 0 0 2 0 0]
 [9 0 0 0 0 1 0 0 0]
 [0 0 2 0 0 8 0 3 0]
 [5 0 0 0 3 0 0 0 7]
 [0 0 8 0 0 0 5 0 0]
 [6 0 0 0 8 0 0 0 4]
 [0 4 0 1 0 0 7 0 0]
 [0 0 0 7 0 0 0 0 6]
 [0 0 3 0 0 4 0 5 0]] )

(define grid44-res '
 [[3 1 6 5 4 9 2 7 8]
 [9 8 7 3 2 1 6 4 5]
 [4 5 2 6 7 8 9 3 1]
 [5 9 4 2 3 6 8 1 7]
 [2 3 8 4 1 7 5 6 9]
 [6 7 1 9 8 5 3 2 4]
 [8 4 5 1 6 2 7 9 3]
 [1 2 9 7 5 3 4 8 6]
 [7 6 3 8 9 4 1 5 2]] )

(define grid45 '
 [[0 8 0 0 0 0 0 4 0]
 [0 0 0 4 6 9 0 0 0]
 [4 0 0 0 0 0 0 0 7]
 [0 0 5 9 0 4 6 0 0]
 [0 7 0 6 0 8 0 3 0]
 [0 0 8 5 0 2 1 0 0]
 [9 0 0 0 0 0 0 0 5]
 [0 0 0 7 8 1 0 0 0]
 [0 6 0 0 0 0 0 1 0]] )

(define grid45-res '
 [[5 8 6 1 2 7 9 4 3]
 [7 2 3 4 6 9 8 5 1]
 [4 9 1 8 5 3 2 6 7]
 [1 3 5 9 7 4 6 2 8]
 [2 7 9 6 1 8 5 3 4]
 [6 4 8 5 3 2 1 7 9]
 [9 1 7 2 4 6 3 8 5]
 [3 5 2 7 8 1 4 9 6]
 [8 6 4 3 9 5 7 1 2]] )

(define grid46 '
 [[9 0 4 2 0 0 0 0 7]
 [0 1 0 0 0 0 0 0 0]
 [0 0 0 7 0 6 5 0 0]
 [0 0 0 8 0 0 0 9 0]
 [0 2 0 9 0 4 0 6 0]
 [0 4 0 0 0 2 0 0 0]
 [0 0 1 6 0 7 0 0 0]
 [0 0 0 0 0 0 0 3 0]
 [3 0 0 0 0 5 7 0 2]] )

(define grid46-res '
 [[9 5 4 2 1 3 6 8 7]
 [6 1 7 5 4 8 9 2 3]
 [8 3 2 7 9 6 5 4 1]
 [7 6 3 8 5 1 2 9 4]
 [1 2 8 9 7 4 3 6 5]
 [5 4 9 3 6 2 1 7 8]
 [2 8 1 6 3 7 4 5 9]
 [4 7 5 1 2 9 8 3 6]
 [3 9 6 4 8 5 7 1 2]] )

(define grid47 '
 [[0 0 0 7 0 0 8 0 0]
 [0 0 6 0 0 0 0 3 1]
 [0 4 0 0 0 2 0 0 0]
 [0 2 4 0 7 0 0 0 0]
 [0 1 0 0 3 0 0 8 0]
 [0 0 0 0 6 0 2 9 0]
 [0 0 0 8 0 0 0 7 0]
 [8 6 0 0 0 0 5 0 0]
 [0 0 2 0 0 6 0 0 0]] )

(define grid47-res '
 [[1 5 9 7 4 3 8 6 2]
 [2 7 6 5 8 9 4 3 1]
 [3 4 8 6 1 2 7 5 9]
 [6 2 4 9 7 8 3 1 5]
 [9 1 7 2 3 5 6 8 4]
 [5 8 3 1 6 4 2 9 7]
 [4 3 5 8 2 1 9 7 6]
 [8 6 1 4 9 7 5 2 3]
 [7 9 2 3 5 6 1 4 8]] )

(define grid48 '
 [[0 0 1 0 0 7 0 9 0]
 [5 9 0 0 8 0 0 0 1]
 [0 3 0 0 0 0 0 8 0]
 [0 0 0 0 0 5 8 0 0]
 [0 5 0 0 6 0 0 2 0]
 [0 0 4 1 0 0 0 0 0]
 [0 8 0 0 0 0 0 3 0]
 [1 0 0 0 2 0 0 7 9]
 [0 2 0 7 0 0 4 0 0]] )

(define grid48-res '
 [[8 6 1 3 5 7 2 9 4]
 [5 9 7 4 8 2 3 6 1]
 [4 3 2 6 1 9 7 8 5]
 [9 1 6 2 7 5 8 4 3]
 [3 5 8 9 6 4 1 2 7]
 [2 7 4 1 3 8 9 5 6]
 [7 8 9 5 4 1 6 3 2]
 [1 4 3 8 2 6 5 7 9]
 [6 2 5 7 9 3 4 1 8]] )

(define grid49 '
 [[0 0 0 0 0 3 0 1 7]
 [0 1 5 0 0 9 0 0 8]
 [0 6 0 0 0 0 0 0 0]
 [1 0 0 0 0 7 0 0 0]
 [0 0 9 0 0 0 2 0 0]
 [0 0 0 5 0 0 0 0 4]
 [0 0 0 0 0 0 0 2 0]
 [5 0 0 6 0 0 3 4 0]
 [3 4 0 2 0 0 0 0 0]] )

(define grid49-res '
 [[2 9 4 8 6 3 5 1 7]
 [7 1 5 4 2 9 6 3 8]
 [8 6 3 7 5 1 4 9 2]
 [1 5 2 9 4 7 8 6 3]
 [4 7 9 3 8 6 2 5 1]
 [6 3 8 5 1 2 9 7 4]
 [9 8 6 1 3 4 7 2 5]
 [5 2 1 6 7 8 3 4 9]
 [3 4 7 2 9 5 1 8 6]] )

(define grid50 '
 [[3 0 0 2 0 0 0 0 0]
 [0 0 0 1 0 7 0 0 0]
 [7 0 6 0 3 0 5 0 0]
 [0 7 0 0 0 9 0 8 0]
 [9 0 0 0 2 0 0 0 4]
 [0 1 0 8 0 0 0 5 0]
 [0 0 9 0 4 0 3 0 1]
 [0 0 0 7 0 2 0 0 0]
 [0 0 0 0 0 8 0 0 6]] )

(define grid50-res '
 [[3 5 1 2 8 6 4 9 7]
 [4 9 2 1 5 7 6 3 8]
 [7 8 6 9 3 4 5 1 2]
 [2 7 5 4 6 9 1 8 3]
 [9 3 8 5 2 1 7 6 4]
 [6 1 4 8 7 3 2 5 9]
 [8 2 9 6 4 5 3 7 1]
 [1 6 3 7 9 2 8 4 5]
 [5 4 7 3 1 8 9 2 6]] )

;--------------------------------------------------------------------------------------------
;---------------------------------------TESTS------------------------------------------------
;--------------------------------------------------------------------------------------------
(my-assert-true (not (solve-sudoku wrong01)))
(my-assert-true (not (solve-sudoku wrong02)))
(my-assert-true (not (solve-sudoku wrong03)))
(my-assert-true (not (solve-sudoku wrong04)))
(my-assert-true (not (solve-sudoku wrong05)))
(my-assert-true (not (solve-sudoku wrong06)))
(my-assert-true (not (solve-sudoku wrong07)))
(my-assert-true (not (solve-sudoku wrong08)))
(my-assert-true (not (solve-sudoku wrong09)))
(my-assert-true (not (solve-sudoku wrong10)))
(my-assert-equals grid01-res (solve-sudoku grid01))
(my-assert-equals grid02-res (solve-sudoku grid02))
(my-assert-equals grid03-res (solve-sudoku grid03))
(my-assert-equals grid04-res (solve-sudoku grid04))
(my-assert-equals grid05-res (solve-sudoku grid05))
(my-assert-equals grid06-res (solve-sudoku grid06))
(my-assert-equals grid07-res (solve-sudoku grid07))
(my-assert-equals grid08-res (solve-sudoku grid08))
(my-assert-equals grid09-res (solve-sudoku grid09))
(my-assert-equals grid10-res (solve-sudoku grid10))
(my-assert-equals grid11-res (solve-sudoku grid11))
(my-assert-equals grid12-res (solve-sudoku grid12))
(my-assert-equals grid13-res (solve-sudoku grid13))
(my-assert-equals grid14-res (solve-sudoku grid14))
(my-assert-equals grid15-res (solve-sudoku grid15))
(my-assert-equals grid16-res (solve-sudoku grid16))
(my-assert-equals grid17-res (solve-sudoku grid17))
(my-assert-equals grid18-res (solve-sudoku grid18))
(my-assert-equals grid19-res (solve-sudoku grid19))
(my-assert-equals grid20-res (solve-sudoku grid20))
(my-assert-equals grid21-res (solve-sudoku grid21))
(my-assert-equals grid22-res (solve-sudoku grid22))
(my-assert-equals grid23-res (solve-sudoku grid23))
(my-assert-equals grid24-res (solve-sudoku grid24))
(my-assert-equals grid25-res (solve-sudoku grid25))
(my-assert-equals grid26-res (solve-sudoku grid26))
(my-assert-equals grid27-res (solve-sudoku grid27))
(my-assert-equals grid28-res (solve-sudoku grid28))
(my-assert-equals grid29-res (solve-sudoku grid29))
(my-assert-equals grid30-res (solve-sudoku grid30))
(my-assert-equals grid31-res (solve-sudoku grid31))
(my-assert-equals grid32-res (solve-sudoku grid32))
(my-assert-equals grid33-res (solve-sudoku grid33))
(my-assert-equals grid34-res (solve-sudoku grid34))
(my-assert-equals grid35-res (solve-sudoku grid35))
(my-assert-equals grid36-res (solve-sudoku grid36))
(my-assert-equals grid37-res (solve-sudoku grid37))
(my-assert-equals grid38-res (solve-sudoku grid38))
(my-assert-equals grid39-res (solve-sudoku grid39))
(my-assert-equals grid40-res (solve-sudoku grid40))
(my-assert-equals grid41-res (solve-sudoku grid41))
(my-assert-equals grid42-res (solve-sudoku grid42))
(my-assert-equals grid43-res (solve-sudoku grid43))
(my-assert-equals grid44-res (solve-sudoku grid44))
(my-assert-equals grid45-res (solve-sudoku grid45))
(my-assert-equals grid46-res (solve-sudoku grid46))
(my-assert-equals grid47-res (solve-sudoku grid47))
(my-assert-equals grid48-res (solve-sudoku grid48))
(my-assert-equals grid49-res (solve-sudoku grid49))
(my-assert-equals grid50-res (solve-sudoku grid50))

